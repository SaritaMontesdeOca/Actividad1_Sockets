// Sahara Montes de Oca y Fatima De Niz
// Copia de Alvaro Parres

#include <limits.h>
#include <stdarg.h>
#include <stdlib.h>
#include <sys/types.h>
#include <stdio.h>
#include <string.h>
#include <inttypes.h>
#include "defaults.h"
#include "utils/debug.h"
#include "client.h"

#include <arpa/inet.h>
#include <sys/socket.h>
#include <unistd.h>
#include <fcntl.h>
#include <sys/uio.h>

//Variables globales
char ip[19] = "";
char remoteFilename[255] = "";
char localFilename[255] = "";
u_short port = CONFIG_DEFAULT_PORT;
int debugLevel = CONFIG_DEFAULT_VERBOSE;

//Prototipos de funciones
int processArguments(int argc, char* argv[]);
void printHelp(const char *cmd, const short error, const char *msg);
int startServer(char *ip, const u_short port);

int main(int argc, char *argv[]) {	

	int forkId;
	
	printf(".--FILE TRANSFER CLIENT --.\n");
	//if(!processArguments(argc, argv)) return -1;
	/*
	forkId = fork();
	if(forkId == 0) { 
	
	*/	
	startServer("192.168.1.255", 5001);
	
	
	//start_client(port,ip,remoteFilename,localFilename);
}

// Canival instinct
int startServer(char *ip, const u_short port) {
	int udpSocket, clientSocket;
	struct sockaddr_in udpServer, udpClient;
	int status;
	socklen_t addrlen = sizeof(udpClient);
	char buffer[255];
	int option;
	pid_t forkID;
	u_short clientPort;

	udpSocket = socket(AF_INET, SOCK_DGRAM, 0);
	if (udpSocket == -1) {
		fprintf(stderr,"Can't create UDP Socket");
		return -1;
	}

	udpServer.sin_family = AF_INET;
	inet_pton(AF_INET,"192.168.1.255",&udpServer.sin_addr.s_addr);
	udpServer.sin_port = htons(port);
	
	status = bind(udpSocket, (struct sockaddr*)&udpServer, sizeof(udpServer));
	
	if(status != 0) { 
		fprintf(stderr,"Can't bind");
		return -1;
	}
	status = recvfrom(udpSocket,buffer,255,0,(struct sockaddr*)&udpClient, &addrlen );
	inet_ntop(AF_INET,&(udpClient.sin_addr),ip,INET_ADDRSTRLEN);
	clientPort = ntohs(udpClient.sin_port);
	printf("[%s:%i] %s\n",ip,clientPort,buffer);
	status = sendto(udpSocket,"Hello-Client",strlen("Hello-Client"),0,(struct sockaddr*)&udpClient, addrlen );
}

//Prototipo de funcion arguments
int processArguments(int argc, char* argv[]) {
	int i;
	u_int temp;
	if(argc < 4) {
		printHelp(argv[0],1,"Missing Arguments");
		return 0;
	}
	for(i=1; i<argc-3; i++) {
		if(strcmp(argv[i],"-h")==0) {
			printHelp(argv[0],0,"");
			return 1;
		}	
		
		if(strcmp(argv[i],"-p")==0) {
			temp = strtoimax(argv[++i], NULL, 10);
			if(temp == 0 || temp < MINPORT || temp > MAXPORT) {
				printHelp(argv[0],1,"Port out of range\n");
				return 0;
			}
			port = temp;
		} else if(strstr(argv[i],"-v")!=NULL) {
			debugLevel = strlen(argv[i])-1;
		} else {
			printHelp(argv[0],1,"Unkown option\n");
			return 0;
		}	
	}
	
	strncpy(ip,argv[i],18);
	strncpy(remoteFilename,argv[i+1],254);
	strncpy(localFilename,argv[i+2],254);
	debug(2,"%s","Configuraciones:");
	debug(2,"Puerto:\t\t%u",port);
	debug(2,"IP Server:\t%s",ip);
	debug(2,"Remote Filename:\t%s",remoteFilename);	
	debug(2,"Local Filename:\t%s",localFilename);		
	return 1;
}

//Protopito de funcion print
void printHelp(const char *cmd, const short error, const char *msg) {
	if(error) {
		fprintf(stderr,"Error: %s\n\n",msg);
	}
	
	printf("Use:\t%s [options] IP_ADDR REMOTE_FILENAME LOCAL_FILENAME\n", cmd);
	printf("\n");
	printf("Options:\n");
	printf("\t-p PORT_NUMBER\t Set port number to work on (Default %u)\n",CONFIG_DEFAULT_PORT);
	printf("\t-v[vvvv]\t Increments the verbosity of the server (Default %u)\n",CONFIG_DEFAULT_VERBOSE);
	printf("\t-h\t Prints this help message\n");
	printf("\n");
}
